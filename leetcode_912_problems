class Solution {
public:

    void merge(int low, int mid, int high, vector<int> &nums)
    {
        if(low>=high) return;

        int l = low, r = mid+1, k=0, size = high-low+1;
        vector<int> sorted(size,0);

        while(l<=mid && r<=high)
        {
            if(nums[l] < nums[r])
            {
                sorted[k] = nums[l];
                l++;
                k++;
            }
            else{
                sorted[k] = nums[r];
                r++;
                k++;
            }
        }

        while(l<=mid)
        {
            sorted[k] = nums[l];
            k++;
            l++;
        }

        while(r<=high)
        {
            sorted[k] = nums[r];
            k++;
            r++;
        }

        for (int i = low, j = 0; i <= high; ++i, ++j)
    {
        nums[i] = sorted[j];
    }
    }

    void mergeSort(vector<int>& nums, int start, int end){

        if(start<end)
        {
            int mid = start + (end-start)/2;
            mergeSort(nums,start,mid);
            mergeSort(nums,mid+1,end);
            merge(start,mid,end,nums);
        }

    }


    vector<int> sortArray(vector<int>& nums) {
        mergeSort(nums,0,nums.size()-1);
        return nums;

    }
};
